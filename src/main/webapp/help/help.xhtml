<ui:composition template="/templates/pageTemplate.xhtml"
				xmlns="http://www.w3.org/1999/xhtml"
				xmlns:f="http://java.sun.com/jsf/core"
				xmlns:h="http://java.sun.com/jsf/html"
				xmlns:ui="http://java.sun.com/jsf/facelets"
				xmlns:p="http://primefaces.org/ui">

	<div id="contentFrame">
		<ui:define name="contentFrame">

			<p:outputLabel value="Contents" class="boldtext"/>

			<p:outputPanel>
				<ul>
					<li><a href="#WEBHOOKS">Eventlogger webhooks</a></li>
					<li><a href="#FLUENTD">Fluentd configuration</a></li>
					<li><a href="#SYSLOG">Syslog configuration</a></li>
					<li><a href="#DOCKER">Docker logging drivers</a></li>
					<li><a href="#RULES">Event rules</a></li>
				</ul>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="What is event in Eventlogger?" class="boldtext"/>

			<p:outputPanel>
				<p>Event is HTTP request with some data coming on Eventlogger's webhook endpoint.
				Event consists of the following attributes:</p>
				<ul>
					<li>ident - identification of the process that sent the event [required]</li>
					<li>msg - content of body in plain text [required]</li>
					<li>tag - custom label [optional]</li>
					<li>timestamp - timestamp of event reception [added automatically]</li>
					<li>host - hostname where the event came from [added automatically]</li>
				</ul>
			</p:outputPanel>

			<hr/>

			<a id="WEBHOOKS"></a>
			<p:outputLabel value="Webhooks" class="boldtext"/>

			<p:outputPanel>
				<p>Webhook is an endpoint where HTTP requests are received. Each webhook uses a specific parser for
					that type of message. The following webhooks are supported:</p>
				<ul>
					<li>/eventlogger/webhook/http - any GET or POST request with plain text body</li>
					<li>/eventlogger/webhook/fluentd-syslog - syslog messages coming from fluentd</li>
					<li>/eventlogger/webhook/fluentd-tail - tail of log files from fluentd</li>
				</ul>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="HTTP Webhook" class="boldtext"/>

			<p:outputPanel>
				<p>HTTP webhook receives GET or POST requests and does not provide any parsing of the
					incoming message. In case of POST request, the message is taken from the
					body of the request. Parameters tag and ident must be provided with
					URL parameters.</p>
				<p>Example:</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">POST  /eventlogger/webhook/http?tag=json&amp;ident=my-process</pre>
					<pre style="font-size: 12px;">Body: plain text</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>HTTP webhook also accepts GET requests. All parameters must be provided as URL parameters,
					including message (or msg)</p>
				<p>Example:</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">GET  /eventlogger/webhook/http?tag=test&amp;ident=my-process&amp;msg=This is the text message</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p><b>Note: </b>Message must be properly URL encoded to avoid problems with whitespaces.</p>
			</p:outputPanel>

			<hr/>

			<a id="FLUENTD"></a>
			<p:outputLabel value="Fluentd syslog webhook" class="boldtext"/>

			<p:outputPanel>
				<p>Fluentd syslog webhook accepts syslog messages from fluentd. Configure fluentd
				to receive syslog messages with in_syslog plugin and send the data to Eventlogger
				with out_http plugin.</p>
				<p>Example configuration:</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">
&lt;source&gt;
  @type syslog
  port 10514
  bind 0.0.0.0
  &lt;transport udp&gt;
  &lt;/transport&gt;
  add_remote_addr true
  tag syslog.udp
  &lt;parse&gt;
    @type syslog
    message_format auto
  &lt;/parse&gt;
&lt;/source&gt;

&lt;filter syslog.**&gt;
  @type record_transformer
  &lt;record&gt;
    tag "\${tag}"
  &lt;/record&gt;
&lt;/filter&gt;

&lt;match syslog.**&gt;
  @type http
  endpoint http://eventlogger:8080/eventlogger/webhook/fluentd-syslog
  open_timeout 2
  &lt;format&gt;
    @type json
  &lt;/format&gt;
  &lt;buffer&gt;
    flush_interval 5s
  &lt;/buffer&gt;
&lt;/match&gt;</pre>
				</div>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="Fluentd tail webhook" class="boldtext"/>

			<p:outputPanel>
				<p>Use fluend to tail log files using in_tail plugin. This example sends data to
				two destinations. Ident parameter is provided in URL.</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">
&lt;source&gt;
  @type tail
  &lt;parse&gt;
    @type none
  &lt;/parse&gt;
  read_from_head true
  tag alertmonitor
  path /fluentd/var/log/alertmonitor.log
  pos_file /tmp/alertmonitor.log.pos
&lt;/source&gt;

&lt;match alertmonitor&gt;
  @type copy
  &lt;store&gt;
    @type http
    endpoint http://eventlogger:8080/eventlogger/webhook/fluentd-tail?ident=alertmonitor&amp;file=alertmonitor.log
    http_method post
    open_timeout 2
    headers {"user-agent":"monis-fluentd-tail", "source-file":"alertmonitor.log"}
    content_type "application/json"
    json_array true
    &lt;format&gt;
      @type json
    &lt;/format&gt;
    &lt;buffer&gt;
      flush_interval 5s
    &lt;/buffer&gt;
  &lt;/store&gt;
  &lt;store&gt;
    @type http
    endpoint http://192.168.0.25:8080/eventlogger/webhook/fluentd-tail?ident=alertmonitor&amp;file=alertmonitor.log
    http_method post
    open_timeout 2
    headers {"user-agent":"monis-fluentd-tail", "source-file":"alertmonitor.log"}
    content_type "application/json"
    json_array true
    &lt;format&gt;
      @type json
    &lt;/format&gt;
    &lt;buffer&gt;
      flush_interval 5s
    &lt;/buffer&gt;
  &lt;/store&gt;
&lt;/match&gt;
</pre>
				</div>
			</p:outputPanel>

			<hr/>

			<a id="SYSLOG"></a>
			<p:outputLabel value="Enable syslog server on Linux" class="boldtext"/>

			<p:outputPanel>
				<p>
					To enable receiving messages on port 514 (udp/tcp), configure /etc/rsyslogd.conf:
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">$ModLoad imudp
$UDPServerRun 514

$ModLoad imtcp
$TCPServerRun 514</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>
					Restart syslog (or rsyslog).
				</p>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="Forward syslog messages" class="boldtext"/>

			<p:outputPanel>
				<p>
					Open the /etc/rsyslogd.conf. Configure syslog to send all messages to fluentd
					syslog plugin. Use single @ for udp, and double @@ for tcp.:
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">*.*     @192.168.0.123:10514</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>
					Restart syslog (or rsyslog).
				</p>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="Tail files with syslog" class="boldtext"/>

			<p:outputPanel>
				<p>
					Edit the /etc/rsyslogd.conf or create custom file in /etc/rsyslog.d.
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">$ vi /etc/rsyslog.d/remote-alertmonitor.conf

$ModLoad imfile
$InputFilePollInterval 10
$PrivDropToGroup adm
$InputFileName /var/log/alertmonitor.log
$InputFileTag ALERTMONITOR
$InputFileStateFile /var/spool/rsyslog/alertmonitor-state
$InputFileSeverity info
$InputFileFacility local7
$InputRunFileMonitor
$InputFilePersistStateInterval 1000</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>
					Restart syslog (or rsyslog).
				</p>
			</p:outputPanel>

			<hr/>

			<a id="DOCKER"></a>
			<p:outputLabel value="Using syslog driver in Docker containers" class="boldtext"/>

			<p:outputPanel>
				<p>
					Use Docker's syslog logging driver to send logs to:<br/>
					- fluentd syslog plugin (port 10514) OR<br/>
					- remote syslog server (port 514)
				</p>
				<p>
					In logging options, set remote syslog address, select a syslog format and add a custom tag that will become ident in fluentd (and eventlogger also).
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">services:
  httpd:
    image: httpd
    ports:
      - 8888:80
    logging:
      driver: syslog
      options:
        syslog-address: 'udp://192.168.0.123:10514'
        tag: httpd.log
        syslog-format: rfc5424</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>
					Syslog driver can send messages directly to fluentd on port 10514, or it can send
					messages to remote syslog on port 514, where messages can be intercepted locally
					by fluentd again.
				</p>
			</p:outputPanel>

			<hr/>

			<p:outputLabel value="Using fluentd driver in Docker containers" class="boldtext"/>

			<p:outputPanel>
				<p>
					Use Docker's fluentd logging driver to send logs to fluentd forward plugin.
					Set address of fluentd and add a custom tag.
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">services:
  httpd:
    image: httpd
    ports:
      - 8888:80
    logging:
      driver: fluentd
      options:
        fluentd-address: 192.168.0.123:24224
        tag: httpd.access</pre>
				</div>
			</p:outputPanel>

			<p:outputPanel>
				<p>
					Further, configure fluentd to intercept these messages and send them to
					Eventlogger using out_http plugin. Set the ident and tag as URL parameters.
				</p>
			</p:outputPanel>

			<p:outputPanel>
				<div class="card">
					<pre style="font-size: 12px;">&lt;source&gt;
  @type forward
  port 24224
  bind 0.0.0.0
&lt;/source&gt;

&lt;match httpd.access&gt;
    @type http
      endpoint http://192.168.0.16:8080/eventlogger/webhook/http?ident=httpd.access
      open_timeout 2
      &lt;format&gt;
        @type json
      &lt;/format&gt;
      &lt;buffer&gt;
        flush_interval 10s
      &lt;/buffer&gt;
 &lt;/match&gt;</pre>
				</div>
			</p:outputPanel>

			<hr/>

			<a id="RULES"></a>
			<p:outputLabel value="Event rules" class="boldtext"/>

			<p:outputPanel>
				<p>
					ss
				</p>
			</p:outputPanel>

		</ui:define>
	</div>

</ui:composition>

